<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:spring="http://www.infinispan.org/schemas/spring" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring-5.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	default-autowire="byName">
	
	<!-- RocketMQ消费者， 建议一个Topic配置一个，注意订阅的Topic要和MessageListener是配对的-->
	<bean id="rmqMessageConsumer" class="com.vteba.mq.rocketmq.consumer.RMQMessageConsumer" init-method="init" destroy-method="destroy">
		<property name="namesrvAddr" value="localhost:9876;localhost:9875" />
		<property name="consumerGroup" value="RMQGroup" />
		<property name="topic" value="RMQTopic" />
		<property name="subExpression" value="RMQTags" />
		<!-- 如果有多个Topic，建议使用这种方式：key是Topic，value是tags -->
<!-- 		<property name="topicSubExpressionMap"> -->
<!-- 			<map> -->
<!-- 				<entry key="YinleiUser" value="Test||Test1" /> -->
<!-- 				<entry key="YinleiUser2" value="Test2" /> -->
<!-- 			</map> -->
<!-- 		</property> -->
		<property name="kryoer" ref="kryoer" />
		<!-- 业务监听器 -->
		<property name="messageListener" ref="simpleRMQMessageListener" />
		<!-- 强制业务层自己使用kryo反序列化 -->
		<property name="forceServiceDeserialize" value="true" />
		<property name="initTopic" value="false" />
		<property name="redisService" ref="redisService" />
		<property name="databaseCacheEnable" value="true" />
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>
	
	<!-- RocketMQ生产者，建议使用一个应用配置一个 -->
<!-- 	<bean id="rocketMQMessageProducer" class="com.vteba.mq.rocketmq.producer.RocketMQMessageProducer"  init-method="init" destroy-method="destroy"> -->
<!-- 		<property name="namesrvAddr" value="192.168.1.31:9876" /> -->
<!-- 		<property name="producerGroup" value="userGroup" /> -->
<!-- 		<property name="topic" value="YinleiUser" /> -->
<!-- 		<property name="tags" value="Test" /> -->
<!-- 		<property name="kryoer" ref="kryoer" /> -->
<!-- 	</bean> -->

</beans>