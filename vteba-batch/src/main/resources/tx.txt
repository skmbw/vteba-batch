1、spring的注解事务和aop且面事务都是通过切面实现的，同一个service中方法互调，第二个方法，不会开启事务。
那么为什么spring只对跨Service的方法才生效？ 
Debug代码发现跨Service调用方法时，都会经过org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor.intercept()方法，
只有经过此处，才能对事务进行控制。 只有跨service类，才能开启切面。
2、spring的bean如果实现了Ordered接口，那么他们有一个顺序，可以通过order属性来指定
3、默认情况先注解的order低，也就是说先执行注解的切面，后执行aop的切面。如果同时配置，两个事务管理都会起作用，
只是顺序不同。
4、事务最后是否提交和他们的事务传播级别有关系，REQUIRED情况下，在两个切面上都没有要回滚的异常时
才会提交事务。其中任意一个标记为回滚，那么这个事务是会回滚的。
5、对于注解/aop如果没有指定要回滚的异常类，所有的运行时异常都会导致回滚.已检测CheckedException
不回滚。
如果指定了要回滚的异常类：指定的类及其子类会回滚，运行时异常也会回滚。
如果指定了不需要回滚的异常类：指定的类及其子类不回滚。
6、跨Service调用方法时： 
**如果被调用方法是Propagation.REQUIRES_NEW，被catch后不抛出，事务可以正常提交； 
如果被调用方法是Propagation.REQUIRED，被catch后不抛出，后面的代码虽然可以执行下去，但最终还是会分出rollback-only异常：**Global transaction is marked as rollback-only but transactional code requested commit 
如果是在同一个Service中调用方法时： 
不论注解是REQUIRES_NEW还是REQUIRED，其结果都是一样的，就是都被忽略掉了，等于没写。当其抛出异常时，只需catch住不抛出，事务就可以正常提交。


REQUIRED：业务方法需要在一个事务中运行,如果方法运行时,已处在一个事务中,那么就加入该事务,否则自己创建一个新的事务.这是spring默认的传播行为。

SUPPORTS：如果业务方法在某个事务范围内被调用,则方法成为该事务的一部分,如果业务方法在事务范围外被调用,则方法在没有事务的环境下执行。

MANDATORY：只能在一个已存在事务中执行,业务方法不能发起自己的事务,如果业务方法在没有事务的环境下调用,就抛异常

REQUIRES_NEW：业务方法总是会为自己发起一个新的事务,如果方法已运行在一个事务中,则原有事务被挂起,新的事务被创建,直到方法结束,新事务才结束,原先的事务才会恢复执行.

NOT_SUPPORTED：声明方法不需要事务,如果方法没有关联到一个事务,容器不会为它开启事务.如果方法在一个事务中被调用,该事务会被挂起,在方法调用结束后,原先的事务便会恢复执行.

NEVER：声明方法绝对不能在事务范围内执行,如果方法在某个事务范围内执行,容器就抛异常.只有没关联到事务,才正常执行.

NESTED：如果一个活动的事务存在,则运行在一个嵌套的事务中.如果没有活动的事务,则按REQUIRED属性执行.它使用了一个单独的事务, 这个事务拥有多个可以回滚的保证点.内部事务回滚不会对外部事务造成影响, 它只对DataSourceTransactionManager事务管理器起效.

REQUIRED_NEW和NESTED两种不同的传播机制，功能类似，都涉及到了事务嵌套的问题，那两者有何区别呢？该如何正确使用这两种模式呢？
PROPAGATION_REQUIRES_NEW :内部的事务独立运行，在各自的作用域中，可以独立的回滚或者提交；而外部的事务将不受内部事务的回滚状态影响。 

ROPAGATION_NESTED :NESTED的事务，基于单一的事务来管理，提供了多个保存点。 由于这个设置基于JDBC的保存点，所以只能工作在JDBC的保存点机制之上。
两者都是事务嵌套，不同之处在于，内外事务之间是否存在彼此之间的影响；NESTED之间会受到影响，内部不会影响外部，但是外部会影响内部（如果外部回滚的话，那么内部也会回滚）。
而REQUIRED_NEW则是独立的。