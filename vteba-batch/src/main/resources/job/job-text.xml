<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:spring="http://www.infinispan.org/schemas/spring" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring-5.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-autowire="byName">
	
	<bean id="springJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="userJobTrigger" />
			</list>
		</property>
	</bean>
	
	<bean id="fastJsonSerializer" class="com.vteba.batch.serializer.FastJsonExecutionContextSerializer"></bean>
	
<!-- 	<bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator"> -->
<!-- 		<property name="jobRepository" ref="jobRepository"/>	 -->
<!-- 		<property name="jobLauncher" ref="jobLauncher"/> -->
<!-- 		<property name="jobExplorer" ref="jobExplorer"/> -->
<!-- 		<property name="jobRegistry" ref="jobRegistry"/> -->
<!-- 	</bean> -->
		
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="taskExecutor" />
	</bean>
	
<!-- 	<bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"> -->
<!-- 		<property name="dataSource" ref="tiantianDataSource" /> -->
<!-- 		<property name="serializer" ref="fastJsonSerializer" /> -->
<!-- 	</bean> -->
	
	<!-- Job注册后 Bean后处理器 -->
	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
  	</bean>
	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

<!-- 	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"> -->
<!-- 		<property name="dataSource" ref="tiantianDataSource"/> -->
<!-- 		<property name="transactionManager" ref="transactionManager"/> -->
<!-- 		<property name="serializer" ref="fastJsonSerializer" /> -->
<!-- 	</bean> -->

	<batch:job-repository id="jobRepository"
		data-source="tiantianDataSource"
		transaction-manager="transactionManager"
		serializer="fastJsonSerializer"
		isolation-level-for-create="REPEATABLE_READ" />

	<!-- 投资人处理 -->
	<bean id="investorItemReader" class="com.vteba.batch.user.MyBatisPagingItemReader" scope="step">
	    <property name="sqlSessionFactory" ref="tiantianSqlSessionFactory"/>
	    <property name="queryId" value="com.vteba.batch.investor.dao.InvestorDao.pagedList"/>
 		<property name="pageSize" value="3" />
	</bean>
	<bean id="investorItemProcessor" class="com.vteba.batch.investor.processor.InvestorItemProcessor"></bean>
	<bean id="investorItemWriter" class="com.vteba.batch.user.MyBatisItemWriter" scope="step">
	    <property name="sqlSessionFactory" ref="tiantianSqlSessionFactory"/>
	    <property name="statementId" value="com.vteba.batch.investor.dao.InvestorDao.updateById"/>
	</bean>
	<batch:step id="investorProcessStep">
		<batch:tasklet>
			<!-- 事务属性配置 -->
<!-- 			<batch:transaction-attributes -->
<!-- 				propagation="REQUIRED" -->
<!-- 				isolation="REPEATABLE_READ" -->
<!-- 				timeout="20" -->
<!-- 				/> -->
			<!-- 不回滚异常 -->
<!-- 			<batch:no-rollback-exception-classes> -->
<!-- 				<batch:include class="java.lang.Exception"/> -->
<!-- 			</batch:no-rollback-exception-classes> -->
			
			<batch:chunk reader="investorItemReader" processor="investorItemProcessor" writer="investorItemWriter" commit-interval="3" ><!-- retry-policy="" 重试次数限制，超过抛异常retry-limit="3" --><!-- 指定了skip-policy=""，次数和异常限制被忽略 -->
				<!-- 重试策略，立即进行重试，可以根据自己的业务规则定制复杂的重试策略 
					 放在chunk的属性中也可以，和简单的重试可以同时存在。重试异常失效，
					 但是listener只能和简单重试配合。
					建议，定义了自定义重试策略，就不要使用listener了
					 -->
				<batch:retry-policy>
					<ref bean="investorRetryPolicy"/>
				</batch:retry-policy>
				
				<!-- 重试监听器，每次重试之前都会执行 -->
<!-- 				<batch:retry-listeners> -->
<!-- 					<batch:listener ref="investorRetryListener" /> -->
<!-- 				</batch:retry-listeners> -->

				<!-- 可重试异常，和retry-limit="2"是一对的，简单方式可以使用这种
					哪些异常可以重试，哪些不可以重试，以及总的重试的次数，重试次数默认Integer.MAX_VALUE
				-->
<!-- 				<batch:retryable-exception-classes> -->
<!-- 					<batch:include class="java.lang.RuntimeException"/> -->
<!-- 					<batch:exclude class="java.io.FileNotFoundException"/> -->
<!-- 				</batch:retryable-exception-classes> -->
			</batch:chunk>
		</batch:tasklet>
	</batch:step>

	<!-- 步骤3用户处理 -->
	<bean id="userItemReader" class="com.vteba.batch.user.MyBatisPagingItemReader" scope="step">
	    <property name="sqlSessionFactory" ref="tiantianSqlSessionFactory"/>
	    <property name="queryId" value="com.vteba.batch.user.dao.UserDao.pagedList"/>
 		<property name="pageSize" value="3" />
 		<!-- 可以在启动Job时，在jobParameters中动态添加 -->
<!--  		<property name="resource" value="#{jobParameters['inputResource']}" /> -->
	</bean>
	<bean id="userItemWriter" class="com.vteba.batch.user.MyBatisItemWriter" scope="step">
	    <property name="sqlSessionFactory" ref="tiantianSqlSessionFactory"/>
	    <property name="statementId" value="com.vteba.batch.user.dao.UserDao.updateById"/>
	</bean>
	<batch:step id="userProcessStep">
		<batch:tasklet>
			<batch:chunk reader="userItemReader" processor="userItemProcessor" writer="userItemWriter" skip-limit="1" retry-limit="1" commit-interval="3" ><!-- retry-policy="" 重试次数限制，超过抛异常retry-limit="3" --><!-- 指定了skip-policy=""，次数和异常限制被忽略 -->
				<batch:skippable-exception-classes>
					<batch:include class="com.vteba.common.exception.BasicException"/>
				</batch:skippable-exception-classes>
				
				<batch:listeners>
					<batch:listener ref="chunkExecutionListener"/>
				</batch:listeners>
				
<!-- 				<batch:skip-policy> -->
<!-- 					<ref bean="userSkipPolicy"/> -->
<!-- 				</batch:skip-policy> -->
				<!-- 跳过 skip listener -->
<!-- 				<batch:listeners> -->
<!-- 					<batch:listener ref="userSkipListener"></batch:listener> -->
<!-- 				</batch:listeners> -->
				
				<!-- 重试监听器 -->
<!-- 				<batch:retry-listeners> -->
<!-- 					<batch:listener ref="userRetryListener" /> -->
<!-- 				</batch:retry-listeners> -->
				<!-- 重试策略，配置了以后，配置的重试异常和次数将失效 -->
<!-- 				<batch:retry-policy> -->
<!-- 					<ref bean="userRetryPolicy"/> -->
<!-- 				</batch:retry-policy> -->
				<!-- 可重试或者不可重试的异常 -->
				<batch:retryable-exception-classes>
					<!-- 这里不能直接配置运行时异常，要配置一个自定义的，否则，例如
						跳过那里，如果配置了自定义异常的子类，将会和这个冲突，导致死循环等.
						跳过的异常要在这里排除
					 -->
					<batch:include class="com.vteba.common.exception.ServiceException"/>
					<batch:exclude class="java.io.FileNotFoundException"/>
					<batch:exclude class="com.vteba.common.exception.BasicException"/>
				</batch:retryable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
	</batch:step>

	<batch:job id="userJob" restartable="true">
		<batch:listeners><!-- 多个listener，按配置先后顺序执行，before方法按顺序执行，after逆序执行 -->
			<batch:listener ref="jobExecutionListener" />
		</batch:listeners>
		
		<batch:step id="investorRetryTaskletStep" next="splitParallel">
			<batch:tasklet ref="investorRetryTasklet" />
			<batch:listeners>
				<batch:listener ref="stepExecutionListener" />
			</batch:listeners>
		</batch:step>
		<batch:split id="splitParallel" task-executor="taskExecutor" next="userJobStepInit">
			<batch:flow>
				<batch:step id="parallelStep_1">
					<batch:tasklet ref="parallelStep1" />
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="parallelStep_2">
					<batch:tasklet ref="parallelStep2" />
				</batch:step>
			</batch:flow>
		</batch:split>
		<batch:step id="userJobStepInit" next="investorJobStep">
			<batch:tasklet ref="userTasklet" />
		</batch:step>
		<batch:step id="investorJobStep" parent="investorProcessStep" next="userJobStep">
			
		</batch:step>
		
		<!-- parent父类bean，继承属性，执行父类bean的业务，当前执行是哪个业务 -->
		<batch:step id="userJobStep" parent="userProcessStep">
<!-- 			<batch:next on="FAILED" to="currentsettlementStep2"/> -->
<!-- 			<batch:next on="*" to="currentsettlementStep4"/> -->
<!-- 			<batch:stop on="" restart=""/> -->
<!-- 			<batch:fail on=""/> -->
		</batch:step>
	</batch:job>
	
	<!-- 任务调度器 -->
	<task:scheduler id="taskScheduler" pool-size="10" />
	
	<!-- 线程池执行器 -->
	<task:executor id="taskExecutor" pool-size="5-10" queue-capacity="1024" />
	
<!-- 	<bean id="userJobInstance" class="com.vteba.batch.launcher.JobInstanceDelegate"> -->
<!-- 		<property name="job" ref="userJob" /> -->
<!-- 		<property name="dateFormat" value="yyyyMMdd" /> -->
<!-- 	</bean> -->
	
	<!-- Job任务配置 -->
<!-- 	<task:scheduled-tasks scheduler="taskScheduler"> -->
<!-- 		<task:scheduled ref="userJobInstance" method="execute" cron="0 24 * * * ?"/> -->
<!-- 	</task:scheduled-tasks> -->
	
	<bean id="userJobDetail" class="com.vteba.batch.quartz.JobDetailFactoryBean">
		<!-- 放在这里的参数，spring会自动设置给Job -->
		<property name="jobDataAsMap">
	        <map>
	            <entry key="jobName" value="userJob"/><!-- spring batch的Job的bean的id -->
	            <entry key="jobLocator" value-ref="jobRegistry"/>
	            <entry key="jobLauncher" value-ref="jobLauncher"/>
	        </map>
	    </property>
	</bean>
	
	<bean id="userJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="userJobDetail"></property>
		<property name="cronExpression" value="0 31 * * * ?"></property>
	</bean>
	
	
</beans>